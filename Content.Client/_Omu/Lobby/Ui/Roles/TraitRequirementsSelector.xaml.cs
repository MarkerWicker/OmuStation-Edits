// SPDX-FileCopyrightText: 2024 Leon Friedrich <60421075+ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 ShadowCommander <10494922+ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Guidebook;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Omu.Lobby.Ui.Roles;

/// <summary>
/// A selector used to select traits.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class TraitRequirementsSelector : BoxContainer
{
    private readonly StripeBack _lockStripe;

    public event Action<bool>? PreferenceChanged;

    public bool Preference
    {
        get => ToggleableButton.Pressed;
        set => ToggleableButton.Pressed = value;
    }

    public TraitRequirementsSelector()
    {
        RobustXamlLoader.Load(this);

        _lockStripe = new StripeBack()
        {
            Visible = false,
            HorizontalExpand = true,
            HasMargins = false,
            MouseFilter = MouseFilterMode.Stop,
        };

        ToggleableButton.AddChild(_lockStripe);

        ToggleableButton.OnToggled += OnButtonToggled;
    }

    /// <summary>
    /// Actually adds the controls.
    /// </summary>
    public void Setup(
        string title,
        string? description,
        int traitCost)
    {
        TraitsTitle.Text = title;
        PointsCount.Text = traitCost.ToString();
        ToggleableButton.ToolTip = description;
    }

    public void LockRequirements(FormattedMessage requirements)
    {
        var tooltip = new Tooltip();
        tooltip.SetMessage(requirements);
        ToggleableButton.TooltipSupplier = _ => tooltip;
        ToggleableButton.Disabled = true;
    }

    public void UnlockRequirements()
    {
        ToggleableButton.Disabled = false;
    }

    private void OnButtonToggled(BaseButton.ButtonToggledEventArgs args)
    {
        PreferenceChanged?.Invoke(Preference);
    }

}