using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Guidebook;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Omu.Lobby.Ui;

/// <summary>
/// A warning popup, to tell the user that they're saving a profile with traits that have unmet requirements.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class ConfirmSaveWarningWindow : FancyWindow
{

    // Action probably shouldn't have a generic type, but calling OnSaveButtonPressed with += results 
    // in an error message saying that it has no parameters, and without using += says that it must be called on
    // the left hand side of a += operator unless it's inside this class. so, I give it a useless type.
    public event Action<string>? OnSaveButtonPressed;

    public ConfirmSaveWarningWindow(TraitPrototype trait)
    {
        RobustXamlLoader.Load(this);

        WarningMessage.Text = Loc.GetString("lobby-confirm-save-message", ("trait", Loc.GetString(trait.Name)));

        SaveButton.OnPressed += _ =>
        {
            OnSaveButtonPressed?.Invoke("Save");
            Close();
        };
    }
}